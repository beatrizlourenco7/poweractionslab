name: export-and-import-v2

on:
  workflow_dispatch:
    inputs:
      # Change this value
      solution_name:
        description: 'name of the solution to worked on from Power Platform'
        required: true
        default: ALMLab
       #Do Not change these values
      solution_exported_folder:
        description: 'folder name for staging the exported solution *do not change*'
        required: true
        default: out/exported/
      solution_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_target_folder: 
       description: 'folder name to be created and checked in *do not change*'
       required: true
       default: solutions/
env:
  ENVIRONMENT_URL: 'https://org309e8f7e.crm.dynamics.com/'
  QA_ENVIRONMENT_URL: 'https://orgd0a5070f.crm.dynamics.com/'
  PRODUCTION_ENVIRONMENT_URL: 'https://orga2bd4cb8.crm.dynamics.com/'
  CLIENT_ID: 'c7485251-8ef9-4734-be4f-6e7359faef2a'
  TENANT_ID: '2ae11ddb-eeff-4ba6-8871-ebfc9f61160a'

jobs:
  export-from-dev:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true

    - name: who-am-i action
      uses: microsoft/powerplatform-actions/who-am-i@v0
      with:
        environment-url: ${{env.ENVIRONMENT_URL}}
        app-id: ${{env.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{env.TENANT_ID}}
        
    - name: publish solution customizations
      uses: microsoft/powerplatform-actions/publish-solution@v0
      with:
        environment-url: ${{env.ENVIRONMENT_URL}}
        app-id: ${{env.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{env.TENANT_ID}}
        
    - name: export solution action as unmanaged
      uses: microsoft/powerplatform-actions/export-solution@v0
      with:
        environment-url: ${{env.ENVIRONMENT_URL}}
        app-id: ${{env.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{env.TENANT_ID}}
        solution-name: ${{ github.event.inputs.solution_name }}
        solution-output-file: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}.zip
        managed: false
    
    - name: export solution action as managed
      uses: microsoft/powerplatform-actions/export-solution@v0
      with:
        environment-url: ${{env.ENVIRONMENT_URL}}
        app-id: ${{env.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{env.TENANT_ID}}
        solution-name: ${{ github.event.inputs.solution_name }}
        solution-output-file: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}_managed.zip
        managed: true
    
    - name: check solution as unmanaged
      uses: microsoft/powerplatform-actions/check-solution@v0
      with:
        environment-url: ${{env.ENVIRONMENT_URL}}
        app-id: ${{env.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{env.TENANT_ID}}
        path: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}.zip
        
    - name: unpack unmanaged solution action
      uses: microsoft/powerplatform-actions/unpack-solution@v0
      with:
        solution-file: ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}.zip
        solution-folder: ${{ github.event.inputs.solution_folder}}/${{ github.event.inputs.solution_name }}
        solution-type: 'Both'
        overwrite-files: true
        process-canvas-apps: true
    
    # Reset the solution version in the Solution.xml file
    - name: Set solution version
      run: |
        $file = '${{ github.event.inputs.solution_folder}}/${{ github.event.inputs.solution_name }}\Other\Solution.xml'
        Write-Host $file
        $regex = '<Version>[\s\S]*?<\/Version>'
        (Get-Content $file) -replace $regex, '<Version>1.0.0</Version>' | Set-Content $file
      shell: pwsh
    
    - name: Power Platform CLI install
      run: |
        $nugetPackage = "Microsoft.PowerApps.CLI"
        $nugetPackageVersion = "1.19.4"
        $outFolder = "pac"
        nuget install $nugetPackage -Version $nugetPackageVersion -OutputDirectory $outFolder

        $pacNugetFolder = Get-ChildItem $outFolder | Where-Object {$_.Name -match $nugetPackage + "."}
        $pacPath = $pacNugetFolder.FullName + "/tools"
        echo "POWERAPPS_CLI_PATH=$pacPath" >> $Env:GITHUB_ENV
      shell: pwsh
    
    # Generate deployment settings template file from packed solution using PAC CLI
    - name: Generate deployment settings file
      run: |
        $env:PATH = $env:PATH + ";" + "${{ env.POWERAPPS_CLI_PATH }}"

        pac solution create-settings --solution-zip ${{ github.event.inputs.solution_exported_folder}}/${{ github.event.inputs.solution_name }}.zip --settings-file configurations/${{ github.event.inputs.solution_name }}/DeploymentSettings.json
      shell: pwsh
    
     # Delete out folder with solution exported in zip format
    - name: Delete exported solution (zip)
      run: |
        Write-Host Removing folder ${{ github.event.inputs.solution_exported_folder}}
        Remove-Item ${{ github.event.inputs.solution_exported_folder}} -Recurse
      shell: pwsh
        
    - name: list files and directories
      run: |
        Get-ChildItem -Recurse
      shell: pwsh
      
    - name: branch-solution, prepare it for a PullRequest
      uses: microsoft/powerplatform-actions/branch-solution@v0
      with:
        solution-folder: ${{ github.event.inputs.solution_folder}}/${{ github.event.inputs.solution_name }}
        solution-target-folder: ${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        allow-empty-commit: true
