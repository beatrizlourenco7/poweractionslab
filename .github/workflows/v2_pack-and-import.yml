name: v2_pack-and-import

on:
  workflow_dispatch:
    inputs:
      # Change this value
      solution_name:
        description: 'name of the solution to worked on from Power Platform'
        required: true
        default: ALMLab
       #Do Not change these values
      solution_exported_folder:
        description: 'folder name for staging the exported solution *do not change*'
        required: true
        default: out/exported/
      solution_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_target_folder: 
       description: 'folder name to be created and checked in *do not change*'
       required: true
       default: solutions/
env:
  ENVIRONMENT_URL: 'https://org309e8f7e.crm.dynamics.com/'
  QA_ENVIRONMENT_URL: 'https://orgd0a5070f.crm.dynamics.com/'
  PRODUCTION_ENVIRONMENT_URL: 'https://orga2bd4cb8.crm.dynamics.com/'
  CLIENT_ID: 'c7485251-8ef9-4734-be4f-6e7359faef2a'
  TENANT_ID: '2ae11ddb-eeff-4ba6-8871-ebfc9f61160a'
  SOLUTION_VERSION_MAJOR: '1'

jobs:
  # Job to build a managed version of a solution using a just-in-time Build environment
  build-managed-solution:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
      # Action used to checkout the main branch in the current repository
      - name: Checkout
        uses: actions/checkout@v3.1.0

      # Initialize the solution version
      - name: Set solution version variable
        run: |
          $currentDate = Get-Date -Format "yyyyMMdd"
          $solutionVersion = "${{ env.SOLUTION_VERSION_MAJOR }}.$currentDate.${{ github.run_number }}"
          echo $solutionVersion
          echo "SOLUTION_VERSION=$solutionVersion" >> $Env:GITHUB_ENV
        shell: pwsh

      # Set the solution version in the Solution.xml file
      - name: Set solution version
        run: |
          $file = '${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}\Other\Solution.xml'
          $regex = '<Version>[\s\S]*?<\/Version>'
          (Get-Content $file) -replace $regex, '<Version>${{ env.SOLUTION_VERSION }}</Version>' | Set-Content $file
        shell: pwsh
      
      # Set variable
      - name: Set variable
        run: |
          $file = '${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}\Configurations\DeploymentSettings.json'
          $regex = '<Version>[\s\S]*?<\/Version>'
          (Get-Content $file) -replace $regex, '<Version>${{ env.SOLUTION_VERSION }}</Version>' | Set-Content $file
        shell: pwsh
        
      # Pack the considered solution as managed
      - name: Pack solution
        uses: microsoft/powerplatform-actions/pack-solution@main
        with:
          solution-folder: ${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}
          solution-file: out/solutions/${{ github.event.inputs.solution_name }}_managed.zip
          solution-type: Managed
          process-canvas-apps: true

      # Upload the managed solution we got in the previous step to the GitHub artifact store
      - name: Upload the ready to ship solution to GH artifact store
        uses: actions/upload-artifact@v3
        with:
          name: managedSolutions
          path: out/solutions/${{ github.event.inputs.solution_name }}_managed.zip
          
      - name: Upload Config Json to GH artifact store
        uses: actions/upload-artifact@v3
        with:
          name: Config
          path: ${{ github.event.inputs.solution_target_folder}}/${{ github.event.inputs.solution_name }}/Configurations
  
  release-to-qa:
    needs: [ build-managed-solution ]
    runs-on: windows-latest
    environment: QA
    env:
      RUNNER_DEBUG: 1

    steps:
    - name: Download GH artifact
      uses: actions/download-artifact@v3
      with:
        path: out/release
    
    - name: list files and directories
      run: |
        Get-ChildItem -Recurse
      shell: pwsh
    
    - name: Replace
      run: |
        Write-Host "Starting replace"

        $snapshot = (Get-Content(out/release/Config/DeploymentSettings.json) | ConvertFrom-Json)

        foreach($e in $snapshot.ConnectionReferences)
        {
            if($e.LogicalName -eq "user9_DataverseConnectionReference")
            {
                $e.ConnectionId = "e19beff3d75c4da2b5904a2046c000c3"
            }

            if($e.LogicalName -eq "user9_OutlookConnectionReference")
            {
                $e.ConnectionId = "cd68b7c598674abca710dc0a4f67df11"
            }
        }

        Set-Content -Path out/release/Config/DeploymentSettings.json -Value (ConvertTo-Json -InputObject $snapshot)

        Write-Host "Finish replace"
      shell: pwsh
      
    - name: Import solution to qa env
      uses: microsoft/powerplatform-actions/import-solution@v0
      with:
        environment-url: ${{env.QA_ENVIRONMENT_URL}}
        app-id: ${{ env.CLIENT_ID }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ env.TENANT_ID }}
        solution-file: out/release/managedSolutions/${{ inputs.solution_name }}_managed.zip
        force-overwrite: true
        publish-changes: true
        use-deployment-settings-file: true
        deployment-settings-file: out/release/Config/DeploymentSettings.json
    
    #   - Turn on cloud flows
    #- name: Steps post solution import
    #  run: |
    #    echo "========== Install Microsoft.PowerApps.Administration.PowerShel module =========="
    #    Install-Module -Name Microsoft.PowerApps.Administration.PowerShell -Scope CurrentUser -Force
    #    echo "========== Install Microsoft.Xrm.Data.PowerShell module =========="
    #    Install-Module Microsoft.Xrm.Data.PowerShell -Scope CurrentUser -Force
    #    echo "==========  Set params =========="
    #    $Params = @{
    #      ClientId = "${{ env.CLIENT_ID }}"
    #      ClientSecret = "${{ secrets.PowerPlatformSPN }}"
    #      DataverseEnvironmentUrl = "${{ secrets.QA_ENVIRONMENT_URL }}"
    #      SolutionName = "${{ inputs.solution_name }}"
    #      SolutionComponentsOwnerEmail = "action@github.com"
    #      MaximumTries = "3"
    #    }
    #    echo "==========  Enable-CloudFlows =========="
    #    Import-Module ./scripts/Enable-CloudFlows.ps1 -Force
    #    Enable-CloudFlows @Params -verbose
    #  shell: powershell
        
  release-to-prod:
    needs: [ release-to-qa ]
    runs-on: windows-latest
    environment: PROD
    env:
      RUNNER_DEBUG: 1

    steps:
    - name: Download GH artifact
      uses: actions/download-artifact@v3
      with:
        path: out/release
    
    - name: Import solution to prod env
      uses: microsoft/powerplatform-actions/import-solution@v0
      with:
        environment-url: ${{env.PRODUCTION_ENVIRONMENT_URL}}
        app-id: ${{ env.CLIENT_ID }}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{ env.TENANT_ID }}
        solution-file: out/release/managedSolutions/${{ inputs.solution_name }}_managed.zip
        force-overwrite: true
        publish-changes: true
        use-deployment-settings-file: true
        deployment-settings-file: out/release/Config/DeploymentSettings.json
